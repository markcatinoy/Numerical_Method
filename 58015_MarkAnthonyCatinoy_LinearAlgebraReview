{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled4.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyP4lPw8emB+fX2LpOpYIjpX",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/markcatinoy/Numerical_Method/blob/main/58015_MarkAnthonyCatinoy_LinearAlgebraReview\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OZ8HwqzuFAuf"
      },
      "source": [
        "##Linear Algebra\n",
        "Mark Anthony B. Catinoy\n",
        "This activity consists of two exercises\n",
        "Modulus of a Vector & The Sigmoid"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JBcycZceJamH",
        "outputId": "68817b85-63ba-4953-a613-c8b0bac28b30"
      },
      "source": [
        "!pip install numpy\r\n",
        "import numpy as np"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (1.19.5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "svliH204J7om",
        "outputId": "00123697-c276-4d6a-84f6-220b2fa387c1"
      },
      "source": [
        "B = np.array([2,5,-1,0])\r\n",
        "print(\"Original Array: \",B)\r\n",
        "print(\"Euclidian distance or the Euclidian Norm of the given example: \", np.linalg.norm(B))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Original Array:  [ 2  5 -1  0]\n",
            "Euclidian distance or the Euclidian Norm of the given example:  5.477225575051661\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nwyYFhmVhcSy"
      },
      "source": [
        "linalg.norm is able to return 4 to 8 different matrix norms or one of an infinite number vector norms, depending on the value of the ord parameter.\r\n",
        "The maganitude is computed in Euclidian Norm  which is the linalg.norm"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "0yM-FRb3hdLQ",
        "outputId": "ac3bcde3-caa9-4704-cb43-87a5fe2ce807"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "import numpy as np\r\n",
        "import math\r\n",
        "\r\n",
        "j = (np.linspace(-6, 6, 45))\r\n",
        "w = (1/(1+np.exp(-j)))\r\n",
        "plt.plot(j, w)\r\n",
        "plt.xlabel(\"j\")\r\n",
        "plt.ylabel(\"Sigmoid(j)\")\r\n",
        "\r\n",
        "print(\"x = j\")\r\n",
        "print(\"y = w\")\r\n",
        "\r\n",
        "plt.show()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "x = j\n",
            "y = w\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tpTx7OExFNlH"
      },
      "source": [
        "linspace produces the x values depending on the given range, for example the given values -6 to 6 has 45 intervals in each point of the x value -6, -4, -2 and so on and so forth which is perpendicular to y from 0 to 1 which also has the same interval in each points"
      ]
    }
  ]
}